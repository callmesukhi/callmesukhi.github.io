name: Send Email on Approved Label

on:
  issues:
    types:
      - labeled

permissions:
  issues: read
  contents: read
       
jobs:
  check_label:
    runs-on: ubuntu-latest
    outputs:
      skip_email: ${{ steps.check.outputs.skip_email }}
    steps:
      - name: üè∑Ô∏è Check for 'Request Sent' label
        id: check
        run: |
          labels=$(jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH")
          if echo "$labels" | grep -q '^Request Sent$'; then
            echo "skip_email=true" >> $GITHUB_OUTPUT
          else
            echo "skip_email=false" >> $GITHUB_OUTPUT
      - name: üí¨ Notify if already sent
        if: steps.check.outputs.skip_email == 'true'
        run: |
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body":"> [!CAUTION]\n > This [issue](${{ github.event.issue.number }}) already has a https://github.com/callmesukhi/callmesukhi.github.io/labels/Request%20Sent label. If this was assigned by mistake or you want to resend the request, please remove the https://github.com/callmesukhi/callmesukhi.github.io/labels/Request%20Sent and https://github.com/callmesukhi/callmesukhi.github.io/labels/Approved labels and **reapply** the https://github.com/callmesukhi/callmesukhi.github.io/labels/Approved label."}' \
            "$COMMENT_URL"
            
  send_email:
    needs: check_label
    if: needs.check_label.outputs.skip_email == 'false' && github.event.label.name == 'Approved'
    runs-on: ubuntu-latest
    permissions:
        issues: write
        contents: read

    steps:
      - name: ‚úîÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üßπ Sanitize issue body and save to file
        run: |
          set -e
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          ISSUE_BODY=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH") || {
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body":"> [!CAUTION]\n > Failed to read issue body from GitHub event."}' "$COMMENT_URL"
            exit 1
          }

          ISSUE_BODY=$(echo "$ISSUE_BODY" | sed -E 's/(^|[^`])`([^`]+)`([^`]|$)/\1**\2**\3/g') || {
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body":"> [!CAUTION]\n > Failed to sanitize inline code blocks."}' "$COMMENT_URL"
            exit 1
          }

          inside_block=false
          {
            while IFS= read -r line; do
              if [[ "$line" =~ ^\`\`\` ]]; then
                if [ "$inside_block" = false ]; then
                  inside_block=true
                else
                  inside_block=false
                fi
                echo "> $line"
              elif [ "$inside_block" = true ]; then
                echo "> $line"
              else
                echo "$line"
              fi
            done <<< "$ISSUE_BODY"
          } > issue-body.txt || {
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body":"> [!CAUTION]\n > Failed to write sanitized issue body."}' "$COMMENT_URL"
            exit 1
          }

      - name: ‚úçÔ∏è Create markdown email template
        run: |
          set -e
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          cat <<'EOF' > email-template.md
          üöÄ An issue has been marked as **Approved**!

          ### Issue Body
          $ISSUE_BODY
          EOF

          # export ISSUE_TITLE="${{ github.event.issue.title }}"
          # export ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
          # export ISSUE_URL="${{ github.event.issue.html_url }}"
          export ISSUE_BODY="$(cat issue-body.txt)"

          envsubst < email-template.md > email.md || {
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body":"> [!CAUTION]\n > Failed to create the final email content."}' "$COMMENT_URL"
            exit 1
          }

      - name: üì≤ Convert markdown to HTML
        run: |
          set -e
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          sudo apt-get update && sudo apt-get install -y pandoc || {
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body":"> [!CAUTION]\n > Failed to install Pandoc."}' "$COMMENT_URL"
            exit 1
          }

          pandoc email.md -f markdown -t html -s -o generated-email.html --metadata title="Request Approved" || {
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"body":"> [!CAUTION]\n > Failed to convert Markdown to HTML."}' "$COMMENT_URL"
            exit 1
          }
      
      - name: üìß Send email notification
        id: send_email
        uses: dawidd6/action-send-mail@v4
        with:
          connection_url: ${{ secrets.MAIL_CONNECTION }}
          subject: "‚úÖ Request approved!"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          reply_to: ${{ secrets.MAIL_REPLY_TO }}
          cc: ${{ secrets.MAIL_CC }}
          html_body: file://generated-email.html

      - name: üì© Email failure fallback
        if: failure() && steps.send_email.conclusion != 'success'
        run: |
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          RAW_EMAIL="${{ secrets.MAIL_TO }}"
          EMAIL_DOMAIN=$(echo "$RAW_EMAIL" | sed -E 's/^.*@//' | sed -E 's/\.[^.]+$//' | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body":"> [!CAUTION]\n > :red_circle: @${{ github.event.issue.user.login }}, sending request to `'"$EMAIL_DOMAIN"'` failed. Please check workflow logs."}' \
            "$COMMENT_URL"

      - name: ‚úÖ Comment on success
        if: success()
        run: |
          COMMENT_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments"
          RAW_EMAIL="${{ secrets.MAIL_TO }}"
          EMAIL_DOMAIN=$(echo "$RAW_EMAIL" | sed -E 's/^.*@//' | sed -E 's/\.[^.]+$//' | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"**@${{ github.event.issue.user.login }}**\n\n‚úÖ Request sent successfully to \`$EMAIL_DOMAIN\`\ üöÄ"}" "$COMMENT_URL"
      
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"labels": ["Request Sent"]}' \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/labels"
