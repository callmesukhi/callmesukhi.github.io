name: Send Email on Approved Label

on:
  issues:
    types:
      - labeled

permissions:
  issues: read
  contents: read
  actions: read

jobs:
  check_label:
    if: github.event.label.name == 'Approved'
    runs-on: ubuntu-latest
    permissions:
        issues: write
    outputs:
      skip_email: ${{ steps.check.outputs.skip_email }}
    env:
      GH_TOKEN: ${{ github.token }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
    steps:
      - name: ‚úîÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Check for 'Request Sent' label
        id: check
        run: |
          labels=$(jq -r '.issue.labels[].name' "$GITHUB_EVENT_PATH")
          if echo "$labels" | grep -q '^Request Sent$'; then
            echo "skip_email=true" >> $GITHUB_OUTPUT
          else
            echo "skip_email=false" >> $GITHUB_OUTPUT
          fi

      - name: üí¨ Notify if already sent
        if: steps.check.outputs.skip_email == 'true'
        run: |
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > This issue already has a https://github.com/github/domains/labels/Request%20Sent label. If this was assigned by mistake or you want to resend the request, please remove the https://github.com/github/domains/labels/Request%20Sent and https://github.com/github/domains/labels/Approved labels and **reapply** the https://github.com/github/domains/labels/Approved label.
          
          cc **@github/github-domains-admins** **@${{ github.event.issue.user.login }}**""

  request_approval:
    needs: check_label
    if: needs.check_label.outputs.skip_email == 'false' && github.event.label.name == 'Approved'
    runs-on: ubuntu-latest
    permissions:
      issues: write
    env:
      GH_TOKEN: ${{ github.token }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
    steps:
      - name: ‚úîÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üí¨ Notify approval required and add label
        run: |
          APPROVAL_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          gh issue comment $ISSUE_NUMBER --body "> [!IMPORTANT]
          > Approval required from the **@github/github-domains-admins** team. [Review and Approve Workflow Run](${APPROVAL_URL}) to send the email."
          gh issue edit $ISSUE_NUMBER --add-label "REQUIRES-APPROVAL-TO-SEND-EMAIL"

  send_approved_email:
    needs: request_approval
    if: success() && github.event.label.name == 'Approved' && needs.request_approval.result == 'success'
    runs-on: ubuntu-latest
    permissions:
        issues: write 
        actions: write
    environment:
      name: send-email
    env:
      GH_TOKEN: ${{ github.token }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
    steps:
      - name: ‚úîÔ∏è Checkout repo
        uses: actions/checkout@v4

      - name: üßπ Sanitize issue body and save to file
        run: |
          set -e
          ISSUE_BODY=$(jq -r '.issue.body' "$GITHUB_EVENT_PATH") || {
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > üî¥ Failed to read issue body from GitHub event.

          cc @callmesukhi"
            exit 1
          }

          ISSUE_BODY=$(echo "$ISSUE_BODY" | sed -E 's/(^|[^`])`([^`]+)`([^`]|$)/\1**\2**\3/g') || {
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > üî¥ Failed to sanitize inline code blocks.

          cc @callmesukhi"
            exit 1
          }

          inside_block=false
          {
            while IFS= read -r line; do
              if [[ "$line" =~ ^\`\`\` ]]; then
                if [ "$inside_block" = false ]; then
                  inside_block=true
                else
                  inside_block=false
                fi
                echo "> $line"
              elif [ "$inside_block" = true ]; then
                echo "> $line"
              else
                echo "$line"
              fi
            done <<< "$ISSUE_BODY"
          } > issue-body.txt || {
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > üî¥ Failed to write sanitized issue body.

          cc @callmesukhi"
            exit 1
          }

      - name: ‚úçÔ∏è Create markdown email template
        run: |
          set -e
          cat <<'EOF' > email-template.md
          $ISSUE_BODY
          EOF

          export ISSUE_TITLE="${{ github.event.issue.title }}"
          export ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
          export ISSUE_URL="${{ github.event.issue.html_url }}"
          export ISSUE_BODY="$(cat issue-body.txt)"

          envsubst < email-template.md > email.md || {
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > üî¥ Failed to create the final email content.

          cc @callmesukhi"
            exit 1
          }

      - name: üì≤ Convert markdown to HTML
        id: convert
        uses: docker://pandoc/core:3.1
        with:
          args: -f markdown -t html -s -o generated-email.html email.md

      - name: ‚ùå If Converting to HTML fails
        if: failure() && steps.convert.conclusion != 'success' && steps.convert.outcome != 'skipped'
        run: |
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > üî¥ Failed to convert Markdown to HTML.

          cc @callmesukhi"

      - name: üìß Send email notification
        id: send_email
        uses: dawidd6/action-send-mail@88cb2160ee7129bc98b7168ff2059e6bede9f33f
        with:
          connection_url: ${{ secrets.MAIL_CONNECTION_URL }}
          subject: "[ACTION]: Purchase/Transfer"
          to: ${{ secrets.MAIL_TO }}
          from: ${{ secrets.MAIL_FROM }}
          reply_to: ${{ secrets.MAIL_REPLY_TO }}
          cc: ${{ secrets.MAIL_CC }}
          html_body: file://generated-email.html

      - name: üì© Email failure fallback
        if: failure() && steps.send_email.conclusion != 'success' && steps.send_email.outcome != 'skipped'
        run: |
          RAW_EMAIL="${{ secrets.MAIL_TO }}"
          EMAIL_DOMAINS=$(echo "$RAW_EMAIL" | tr ',' '\n' | \
          sed -E 's/^.*@//' | \
          sed -E 's/\.[^.]+$//' | \
          awk '{ print toupper(substr($0,1,1)) substr($0,2) }' | \
          sort -u | paste -sd ', ' -)
          gh issue comment $ISSUE_NUMBER --body "> [!CAUTION]
          > :red_circle: **@${{ github.event.issue.user.login }}**, sending request to **${EMAIL_DOMAINS}** failed. Please check workflow logs.

          cc @callmesukhi"

      - name: ‚úÖ Comment on success
        if: success() && steps.send_email.conclusion == 'success' && steps.send_email.outcome != 'skipped'
        run: |
          RAW_EMAIL="${{ secrets.MAIL_TO }}"
          EMAIL_DOMAINS=$(echo "$RAW_EMAIL" | tr ',' '\n' | \
          sed -E 's/^.*@//' | \
          sed -E 's/\.[^.]+$//' | \
          awk '{ print toupper(substr($0,1,1)) substr($0,2) }' | \
          sort -u | paste -sd ', ' -)
          gh issue comment $ISSUE_NUMBER --body "> [!NOTE]
          > ‚úÖ **@${{ github.event.issue.user.login }}**, request sent successfully to **${EMAIL_DOMAINS}** üöÄ"
          gh issue edit $ISSUE_NUMBER --add-label "Request Sent" --remove-label "REQUIRES-APPROVAL-TO-SEND-EMAIL"
